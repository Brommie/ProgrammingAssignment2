?student
??student
??t dist
??tdist
??qstudent
data(sleep)
head(sleep)
?qt
mn = 1100
s = 30
mn + c(-1,1) * qt(.975, 8) * s / sqrt(9)
?pt
qt(.95, 8)
qt(.95, 8)*sqrt(9)
qt(.975, 8)*sqrt(9)
qt(.975, 8)/sqrt(9)
qt(.975, 8)/sqrt(9) - 2
sqrt( (.6^2)/10 + (.68^2)/10)
(.6/10)(.6/10)/9
(.6/10)*(.6/10)/9
(.6/10)*(.6/10)/9 + (.68/10)*(.68/10)/9
.2867752/.0009137778
2 + c(-1,1) * qt(.975, 313) * .6 / sqrt(313)
qt(.025, 8)/sqrt(9) - 2
qt(.025, 8)/sqrt(9)
library(ISLR)
data(College)
summary(College)
x=seq(-pi,pi,length=50)
y = x
f=outer(x,y,function(x,y)cos(y)/(1+x^2))
contour(x,y,f)
image(x,y,f)
contour(x,y,f, nlevels=45)
contour(x,y,f, nlevels=45, add=TRUE
)
image(x,y,f)
contour(x,y,f, nlevels=45, add=TRUE
)
perp(x,y,f)
persp(x,y,f)
persp(x,y,f, 30)
persp(x,y,f, theta= 30)
persp(x,y,f, phi= 30)
persp(x,y,f, phi= 10)
persp(x,y,f, phi= 20, theta = 30)
persp(x,y,f, phi= 90, theta = 30)
A = matrix(1:16, 4,4)
A
A[1,]
A[,1]
A[,-1]
A[,-c(1,2)]
data(Auto)
dims(Auto)
dim(Auto)
names(Auto)
Auto$mgp[-c(1:390)]
Auto$mpg[-c(1:390)]
Auto$mpg[391:392]
Auto$mpg[1:5]
head(Auto)
attach(Auto)
plot(mpg, cylinders)
plot(mpg ~ cylinders)
detach(Auto)
attach(College)
attach(Auto)
cylinders <- as.factor(cylinders)
plot(mpg ~ cylinders)
plot(mpg ~ cylinders, col=red)
plot(mpg ~ cylinders, col="red")
plot(mpg ~ cylinders, col="red", horizontal=TRUE)
pairs(Auto)
pairs(∼ mpg + displacement + horsepower + weight +          acceleration , Auto)
pairs(∼ mpg + displacement + horsepower + weight + acceleration , Auto)
pairs(∼ mpg + displacement + horsepower + weight + acceleration, Auto)
pairs(~mpg+displacement+horsepower+weight+acceleration, Auto)
?Auto
attributes(Auto)
x <- c(4, TRUE)
class(x)
x <- c(1,3,5)
y <- c(2,4,6)
rbind(x,y)
x <- list(2, "a", "b", TRUE)
x[[1]]
x <- 1:4
y <- 2:3
x + y
class(x+y)
x <- c(3, 5, 1, 10, 12, 6)
x[x < 6] <- 0
x
read.csv("hw1_data.csv")
hw1 <- read.csv("hw1_data.csv")
names(hw1)
hw1[1:2,]
hw1[152:153,]
hw1$Ozone[47]
sum(complete.cases(hw1$Ozone))
153-116
mean(hw1$Ozone)
sum(complete.cases(hw1$Ozone, rm.na=TRUE))
mean(hw1$Ozone, rm.na=TRUE
)
summary(hw1)
hw1.8 <- hw1[ hw1$Ozone>31 & hw1$Temp>90, ]
hw1.8
summary(hw1.8)
mean(hw1[ hw1$Month==6, 4])
mean(hw1[ hw1$Month==6, ]$Temp)
max(hw1[ hw1$Month==5, ]$Ozone)
max(hw1[ hw1$Month==5, ]$Ozone, na.rm=TRUE)
library("lattice", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
help(lattice)
xyplot(1:4, 1:4)
xyplot(x=1:4)
require(stats)
## Tonga Trench Earthquakes
Depth <- equal.count(quakes$depth, number=8, overlap=.1)
xyplot(lat ~ long | Depth, data = quakes)
update(trellis.last.object(),
strip = strip.custom(strip.names = TRUE, strip.levels = TRUE),
par.strip.text = list(cex = 0.75),
aspect = "iso")
require(stats)
## Tonga Trench Earthquakes
Depth <- equal.count(quakes$depth, number=8, overlap=.1)
g <- xyplot(lat ~ long | Depth, data = quakes)
update(trellis.last.object(),
strip = strip.custom(strip.names = TRUE, strip.levels = TRUE),
par.strip.text = list(cex = 0.75),
aspect = "iso")
class(g)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
head(nlme)
head(weight)
?nlme
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet)
library(nlme)
library(lattice)
xyplot(weight ~ Time )
library(nlme)
library(lattice)
xyplot(weight ~ Time )
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
set.seed(1)
rpois(5, 2)
x <- c(1,2,3)
y <- c(4,5,6)
cbind(x,y)
rbind(x,y)
list(1,2,3)
list[[2]]
list(1,2,3)[[2]]
x + y
x <- 1:4
y <- 2:3
x
y
x + y
class(x)
class(x+y)
x <- c(1,2,3,4)
class(x)
class(x+y)
install.packages("swirl")
library(swirl)
rm(list=ls())
swirl()
5 + 7
x <- 5+7
x
y <- x-3
y
z <- c(1.1,9,3.14)
?c
z
c(z,555,z)
z*2 + 100
mySqrt <- sqrt(z-1)
mySqrt
myDiv <- z/mySqrt
myDiv
c(1,2,3,4) + c(0,10)
c(1,2,3,4) + c(0,10,100)
rm()
?rm
rm
rm()
setwd("~/Documents/Computing for Data Analysis/ProgrammingAssignment2")
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
rm(ls())
ls()
environment()
?rm
class(ls)
class(ls())
rm(list=ls())
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makeVector(c(1,2,3))
makeVector(c(1,2,3))
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinverse <- function(solve) inv <<- solve
getinverse <- function() inv
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getinv()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setinv(inv)
inv
}
m <- makeCacheMatrix()
m
m$set(matrix(1,2,3,4,5))
?matrix
m$set(matrix(c(1,2,3,4,5,6), 2)
)
m
m$get
m$get()
cacheSolve(m)
m$set(matrix(c(1,2,3,4,5,6,7,8,9), 3)
)
cacheSolve(m)
m$set(matrix(c(1,2,3,4,5,6,7,8,10), 3))
cacheSolve(m)
cacheSolve(m)
m$set(matrix(c(1,2,3,4,5,100,7,8,10), 3))
cacheSolve(m)
